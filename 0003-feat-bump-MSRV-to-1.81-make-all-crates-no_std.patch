From 8b34bcb4f513db6907b637ce67672a1f23b9f34b Mon Sep 17 00:00:00 2001
From: StackOverflowExcept1on
 <109800286+StackOverflowExcept1on@users.noreply.github.com>
Date: Sun, 2 Mar 2025 12:19:48 +0300
Subject: [PATCH] feat: bump MSRV to 1.81, make all crates no_std

---
 .github/workflows/main.yml             |  7 +++---
 Cargo.toml                             |  1 +
 frost-core/CHANGELOG.md                |  4 +++
 frost-core/Cargo.toml                  |  8 +++---
 frost-core/src/error.rs                |  7 +-----
 frost-core/src/lib.rs                  |  2 +-
 frost-core/src/scalar_mul.rs           | 23 +----------------
 frost-core/src/tests/vss_commitment.rs |  1 +
 frost-ed25519/Cargo.toml               | 10 +++-----
 frost-ed25519/src/lib.rs               |  2 +-
 frost-ed448/Cargo.toml                 | 12 ++++-----
 frost-ed448/src/lib.rs                 | 34 +++++++++++++-------------
 frost-ed448/src/tests/deserialize.rs   |  6 ++---
 frost-p256/Cargo.toml                  | 10 +++-----
 frost-p256/src/lib.rs                  |  2 +-
 frost-rerandomized/Cargo.toml          |  4 +--
 frost-rerandomized/src/lib.rs          |  2 +-
 frost-ristretto255/Cargo.toml          | 10 +++-----
 frost-ristretto255/src/lib.rs          |  2 +-
 frost-secp256k1-evm/Cargo.toml         | 10 +++-----
 frost-secp256k1-evm/src/lib.rs         |  2 +-
 frost-secp256k1-tr/Cargo.toml          | 10 +++-----
 frost-secp256k1-tr/src/lib.rs          |  2 +-
 frost-secp256k1/Cargo.toml             | 10 +++-----
 frost-secp256k1/src/lib.rs             |  2 +-
 25 files changed, 72 insertions(+), 111 deletions(-)

diff --git a/.github/workflows/main.yml b/.github/workflows/main.yml
index 124ac3f..77f6a63 100644
--- a/.github/workflows/main.yml
+++ b/.github/workflows/main.yml
@@ -19,7 +19,7 @@ jobs:
       - run: cargo build
 
   build_msrv:
-    name: build with MSRV (1.66.1)
+    name: build with MSRV (1.81)
     runs-on: ubuntu-latest
 
     steps:
@@ -34,7 +34,7 @@ jobs:
       - run: cargo update -Z minimal-versions
       # Now check that `cargo build` works with respect to the oldest possible
       # deps and the stated MSRV
-      - uses: dtolnay/rust-toolchain@1.66.1
+      - uses: dtolnay/rust-toolchain@1.81
       - run: cargo build --all-features
 
   # TODO: this is filling up the disk space in CI. See if there is a way to
@@ -60,10 +60,9 @@ jobs:
   build_no_std:
     name: build with no_std
     runs-on: ubuntu-latest
-    # Skip ed448 which does not support it.
     strategy:
       matrix:
-        crate: [ristretto255, ed25519, p256, secp256k1, secp256k1-evm, secp256k1-tr, rerandomized]
+        crate: [ed448, ristretto255, ed25519, p256, secp256k1, secp256k1-evm, secp256k1-tr, rerandomized]
     steps:
     - uses: actions/checkout@v4.2.2
     - uses: dtolnay/rust-toolchain@master
diff --git a/Cargo.toml b/Cargo.toml
index a9995b0..6c5456f 100644
--- a/Cargo.toml
+++ b/Cargo.toml
@@ -15,6 +15,7 @@ members = [
 
 [workspace.package]
 edition = "2021"
+rust-version = "1.81"
 version = "2.1.0"
 authors = [
     "Deirdre Connolly <durumcrustulum@gmail.com>",
diff --git a/frost-core/CHANGELOG.md b/frost-core/CHANGELOG.md
index 0de4def..43d9af6 100644
--- a/frost-core/CHANGELOG.md
+++ b/frost-core/CHANGELOG.md
@@ -6,6 +6,10 @@ Entries are listed in reverse chronological order.
 
 * Added a new ciphersuite `frost-secp256k1-evm` that uses the secp256k1
   elliptic curve with hash keccak256.
+* Added no-std support for frost-ed448 crate. This became possible after migration to `ed448-goldilocks-plus` (fork of
+  `ed448-goldilocks`).
+* MSRV has been bumped to Rust 1.81, making all crates no-std. The `std` and `nightly` features were removed from all
+  crates.
 
 ## 2.1.0
 
diff --git a/frost-core/Cargo.toml b/frost-core/Cargo.toml
index 0907e8b..b3eab93 100644
--- a/frost-core/Cargo.toml
+++ b/frost-core/Cargo.toml
@@ -1,6 +1,7 @@
 [package]
 name = "frost-core"
 edition.workspace = true
+rust-version.workspace = true
 version.workspace = true
 authors.workspace = true
 readme = "README.md"
@@ -25,8 +26,7 @@ postcard = { version = "1.0.0", features = ["alloc"], optional = true }
 rand_core = { version = "0.6", default-features = false }
 serde = { version = "1.0.160", default-features = false, features = ["derive"], optional = true }
 serdect = { version = "0.2.0", optional = true }
-thiserror-nostd-notrait = { version = "1.0.29", default-features = false }
-thiserror = { version = "2.0.3", default-features = false, optional = true }
+thiserror = { version = "2.0.3", default-features = false }
 visibility = "0.1.0"
 zeroize = { version = "1.5.4", default-features = false, features = ["derive"] }
 itertools = { version = "0.14.0", default-features = false }
@@ -45,10 +45,8 @@ rand_chacha.workspace = true
 serde_json.workspace = true
 
 [features]
-default = ["serialization", "cheater-detection", "std"]
+default = ["serialization", "cheater-detection"]
 #! ## Features
-## Enable standard library support.
-std = ["dep:thiserror"]
 ## Expose internal types, which do not have SemVer guarantees. This is an advanced
 ## feature which can be useful if you need to build a modified version of FROST.
 ## The docs won't list them, you will need to check the source code.
diff --git a/frost-core/src/error.rs b/frost-core/src/error.rs
index 78662df..c32fb0c 100644
--- a/frost-core/src/error.rs
+++ b/frost-core/src/error.rs
@@ -1,12 +1,7 @@
 //! FROST Error types
 
-#[cfg(feature = "std")]
-use thiserror::Error;
-
-#[cfg(not(feature = "std"))]
-use thiserror_nostd_notrait::Error;
-
 use crate::{Ciphersuite, Identifier};
+use thiserror::Error;
 
 #[derive(Error, Debug, Clone, Copy, Eq, PartialEq)]
 pub struct ParticipantError<C: Ciphersuite>(Identifier<C>);
diff --git a/frost-core/src/lib.rs b/frost-core/src/lib.rs
index a290984..a0e232b 100644
--- a/frost-core/src/lib.rs
+++ b/frost-core/src/lib.rs
@@ -1,4 +1,4 @@
-#![cfg_attr(not(feature = "std"), no_std)]
+#![no_std]
 #![allow(non_snake_case)]
 // It's emitting false positives; see https://github.com/rust-lang/rust-clippy/issues/9413
 #![allow(clippy::derive_partial_eq_without_eq)]
diff --git a/frost-core/src/scalar_mul.rs b/frost-core/src/scalar_mul.rs
index e8215c4..3d82b28 100644
--- a/frost-core/src/scalar_mul.rs
+++ b/frost-core/src/scalar_mul.rs
@@ -14,27 +14,6 @@ use alloc::vec::Vec;
 
 use crate::{Ciphersuite, Element, Field, Group, Scalar};
 
-/// Calculates the quotient of `self` and `rhs`, rounding the result towards positive infinity.
-///
-/// # Panics
-///
-/// This function will panic if `rhs` is 0 or the division results in overflow.
-///
-/// This function is similar to `div_ceil` that is [available on
-/// Nightly](https://github.com/rust-lang/rust/issues/88581).
-///
-// TODO: remove this function and use `div_ceil()` instead when `int_roundings`
-// is stabilized.
-const fn div_ceil(lhs: usize, rhs: usize) -> usize {
-    let d = lhs / rhs;
-    let r = lhs % rhs;
-    if r > 0 && rhs > 0 {
-        d + 1
-    } else {
-        d
-    }
-}
-
 /// A trait for transforming a scalar generic over a ciphersuite to a non-adjacent form (NAF).
 pub trait NonAdjacentForm<C: Ciphersuite> {
     fn non_adjacent_form(&self, w: usize) -> Vec<i8>;
@@ -81,7 +60,7 @@ where
         let mut naf = vec![0; naf_length];
 
         // Get the number of 64-bit limbs we need.
-        let num_limbs: usize = div_ceil(naf_length, u64::BITS as usize);
+        let num_limbs: usize = naf_length.div_ceil(u64::BITS as usize);
 
         let mut x_u64 = vec![0u64; num_limbs];
 
diff --git a/frost-core/src/tests/vss_commitment.rs b/frost-core/src/tests/vss_commitment.rs
index 25fe7a2..7b32b5e 100644
--- a/frost-core/src/tests/vss_commitment.rs
+++ b/frost-core/src/tests/vss_commitment.rs
@@ -5,6 +5,7 @@ use crate::{
     tests::helpers::generate_element,
     Error, Group,
 };
+use alloc::vec::Vec;
 use debugless_unwrap::DebuglessUnwrap;
 use rand_core::{CryptoRng, RngCore};
 use serde_json::Value;
diff --git a/frost-ed25519/Cargo.toml b/frost-ed25519/Cargo.toml
index 36523fd..89adf48 100644
--- a/frost-ed25519/Cargo.toml
+++ b/frost-ed25519/Cargo.toml
@@ -1,6 +1,7 @@
 [package]
 name = "frost-ed25519"
 edition.workspace = true
+rust-version.workspace = true
 version.workspace = true
 authors.workspace = true
 readme = "README.md"
@@ -24,8 +25,8 @@ sha2 = { version = "0.10.2", default-features = false }
 
 [dev-dependencies]
 criterion.workspace = true
-frost-core = { workspace = true, features = ["std", "test-impl"] }
-frost-rerandomized = { workspace = true, features = ["std", "test-impl"] }
+frost-core = { workspace = true, features = ["test-impl"] }
+frost-rerandomized = { workspace = true, features = ["test-impl"] }
 ed25519-dalek = "2.1.0"
 insta.workspace = true
 hex.workspace = true
@@ -36,11 +37,8 @@ rand_chacha.workspace = true
 serde_json.workspace = true
 
 [features]
-nightly = []
-default = ["serialization", "cheater-detection", "std"]
+default = ["serialization", "cheater-detection"]
 #! ## Features
-## Enable standard library support.
-std = ["frost-core/std"]
 ## Enable `serde` support for types that need to be communicated. You
 ## can use `serde` to serialize structs with any encoder that supports
 ## `serde` (e.g. JSON with `serde_json`).
diff --git a/frost-ed25519/src/lib.rs b/frost-ed25519/src/lib.rs
index 9c4bce8..334922d 100644
--- a/frost-ed25519/src/lib.rs
+++ b/frost-ed25519/src/lib.rs
@@ -1,4 +1,4 @@
-#![cfg_attr(not(feature = "std"), no_std)]
+#![no_std]
 #![allow(non_snake_case)]
 #![deny(missing_docs)]
 #![cfg_attr(docsrs, feature(doc_auto_cfg))]
diff --git a/frost-ed448/Cargo.toml b/frost-ed448/Cargo.toml
index bc7d85b..8e618c4 100644
--- a/frost-ed448/Cargo.toml
+++ b/frost-ed448/Cargo.toml
@@ -1,6 +1,7 @@
 [package]
 name = "frost-ed448"
 edition.workspace = true
+rust-version.workspace = true
 version.workspace = true
 authors.workspace = true
 readme = "README.md"
@@ -16,7 +17,7 @@ rustdoc-args = ["--cfg", "docsrs"]
 
 [dependencies]
 document-features.workspace = true
-ed448-goldilocks = { version = "0.9.0" }
+ed448-goldilocks-plus = { version = "0.15", features = ["zeroize"], default-features = false }
 frost-core.workspace = true
 frost-rerandomized.workspace = true
 rand_core.workspace = true
@@ -24,8 +25,8 @@ sha3 = { version = "0.10.6", default-features = false }
 
 [dev-dependencies]
 criterion.workspace = true
-frost-core = { workspace = true, features = ["std", "test-impl"] }
-frost-rerandomized = { workspace = true, features = ["std", "test-impl"] }
+frost-core = { workspace = true, features = ["test-impl"] }
+frost-rerandomized = { workspace = true, features = ["test-impl"] }
 lazy_static.workspace = true
 insta.workspace = true
 hex.workspace = true
@@ -35,11 +36,8 @@ rand_chacha.workspace = true
 serde_json.workspace = true
 
 [features]
-nightly = []
-default = ["serialization", "cheater-detection", "std"]
+default = ["serialization", "cheater-detection"]
 #! ## Features
-## Enable standard library support.
-std = ["frost-core/std"]
 ## Enable `serde` support for types that need to be communicated. You
 ## can use `serde` to serialize structs with any encoder that supports
 ## `serde` (e.g. JSON with `serde_json`).
diff --git a/frost-ed448/src/lib.rs b/frost-ed448/src/lib.rs
index 5652356..1ee8e0b 100644
--- a/frost-ed448/src/lib.rs
+++ b/frost-ed448/src/lib.rs
@@ -1,3 +1,4 @@
+#![no_std]
 #![allow(non_snake_case)]
 #![deny(missing_docs)]
 #![cfg_attr(docsrs, feature(doc_auto_cfg))]
@@ -7,11 +8,10 @@
 
 extern crate alloc;
 
-use std::collections::BTreeMap;
+use alloc::collections::BTreeMap;
 
-use ed448_goldilocks::{
-    curve::{edwards::CompressedEdwardsY, ExtendedPoint},
-    Scalar,
+use ed448_goldilocks_plus::{
+    CompressedEdwardsY, EdwardsPoint, Scalar, ScalarBytes, WideScalarBytes,
 };
 use frost_rerandomized::RandomizedCiphersuite;
 use rand_core::{CryptoRng, RngCore};
@@ -44,11 +44,11 @@ impl Field for Ed448ScalarField {
     type Serialization = [u8; 57];
 
     fn zero() -> Self::Scalar {
-        Scalar::zero()
+        Scalar::ZERO
     }
 
     fn one() -> Self::Scalar {
-        Scalar::one()
+        Scalar::ONE
     }
 
     fn invert(scalar: &Self::Scalar) -> Result<Self::Scalar, FieldError> {
@@ -64,11 +64,11 @@ impl Field for Ed448ScalarField {
     }
 
     fn serialize(scalar: &Self::Scalar) -> Self::Serialization {
-        scalar.to_bytes_rfc_8032()
+        scalar.to_bytes_rfc_8032().into()
     }
 
     fn deserialize(buf: &Self::Serialization) -> Result<Self::Scalar, FieldError> {
-        match Scalar::from_canonical_bytes(*buf) {
+        match Scalar::from_canonical_bytes(ScalarBytes::from_slice(buf)).into() {
             Some(s) => Ok(s),
             None => Err(FieldError::MalformedScalar),
         }
@@ -86,20 +86,20 @@ pub struct Ed448Group;
 impl Group for Ed448Group {
     type Field = Ed448ScalarField;
 
-    type Element = ExtendedPoint;
+    type Element = EdwardsPoint;
 
     type Serialization = [u8; 57];
 
     fn cofactor() -> <Self::Field as Field>::Scalar {
-        Scalar::one()
+        Scalar::ONE
     }
 
     fn identity() -> Self::Element {
-        Self::Element::identity()
+        Self::Element::IDENTITY
     }
 
     fn generator() -> Self::Element {
-        Self::Element::generator()
+        Self::Element::GENERATOR
     }
 
     fn serialize(element: &Self::Element) -> Result<Self::Serialization, GroupError> {
@@ -111,11 +111,11 @@ impl Group for Ed448Group {
 
     fn deserialize(buf: &Self::Serialization) -> Result<Self::Element, GroupError> {
         let compressed = CompressedEdwardsY(*buf);
-        match compressed.decompress() {
+        match compressed.decompress_unchecked().into_option() {
             Some(point) => {
                 if point == Self::identity() {
                     Err(GroupError::InvalidIdentityElement)
-                } else if point.is_torsion_free() {
+                } else if point.is_torsion_free().into() {
                     // decompress() does not check for canonicality, so we
                     // check by recompressing and comparing
                     if point.compress().0 != compressed.0 {
@@ -144,8 +144,9 @@ fn hash_to_array(inputs: &[&[u8]]) -> [u8; 114] {
 }
 
 fn hash_to_scalar(inputs: &[&[u8]]) -> Scalar {
-    let output = hash_to_array(inputs);
-    Scalar::from_bytes_mod_order_wide(&output)
+    let temp = hash_to_array(inputs);
+    let output = WideScalarBytes::from_slice(&temp);
+    Scalar::from_bytes_mod_order_wide(output)
 }
 
 /// Context string from the ciphersuite in the [spec]
@@ -230,7 +231,6 @@ pub type Identifier = frost::Identifier<E>;
 /// FROST(Ed448, SHAKE256) keys, key generation, key shares.
 pub mod keys {
     use super::*;
-    use std::collections::BTreeMap;
 
     /// The identifier list to use when generating key shares.
     pub type IdentifierList<'a> = frost::keys::IdentifierList<'a, E>;
diff --git a/frost-ed448/src/tests/deserialize.rs b/frost-ed448/src/tests/deserialize.rs
index 6c86b77..e887334 100644
--- a/frost-ed448/src/tests/deserialize.rs
+++ b/frost-ed448/src/tests/deserialize.rs
@@ -1,10 +1,10 @@
 use crate::*;
-use ed448_goldilocks::curve::ExtendedPoint;
+use ed448_goldilocks_plus::EdwardsPoint;
 use frost_core::Ciphersuite;
 
 #[test]
 fn check_deserialize_non_canonical() {
-    let mut encoded_generator = ExtendedPoint::generator().compress().0;
+    let mut encoded_generator = EdwardsPoint::GENERATOR.compress().0;
 
     let r = <Ed448Shake256 as Ciphersuite>::Group::deserialize(&encoded_generator);
     assert!(r.is_ok());
@@ -35,7 +35,7 @@ fn check_deserialize_non_prime_order() {
 
 #[test]
 fn check_deserialize_identity() {
-    let encoded_identity = ExtendedPoint::identity().compress().0;
+    let encoded_identity = EdwardsPoint::IDENTITY.compress().0;
 
     let r = <Ed448Shake256 as Ciphersuite>::Group::deserialize(&encoded_identity);
     assert_eq!(r, Err(GroupError::InvalidIdentityElement));
diff --git a/frost-p256/Cargo.toml b/frost-p256/Cargo.toml
index 1376e4d..e69ca45 100644
--- a/frost-p256/Cargo.toml
+++ b/frost-p256/Cargo.toml
@@ -1,6 +1,7 @@
 [package]
 name = "frost-p256"
 edition.workspace = true
+rust-version.workspace = true
 version.workspace = true
 authors.workspace = true
 readme = "README.md"
@@ -24,8 +25,8 @@ sha2 = { version = "0.10.2", default-features = false }
 
 [dev-dependencies]
 criterion.workspace = true
-frost-core = { workspace = true, features = ["std", "test-impl"] }
-frost-rerandomized = { workspace = true, features = ["std", "test-impl"] }
+frost-core = { workspace = true, features = ["test-impl"] }
+frost-rerandomized = { workspace = true, features = ["test-impl"] }
 insta.workspace = true
 hex.workspace = true
 lazy_static.workspace = true
@@ -35,11 +36,8 @@ rand_chacha.workspace = true
 serde_json.workspace = true
 
 [features]
-nightly = []
-default = ["serialization", "cheater-detection", "std"]
+default = ["serialization", "cheater-detection"]
 #! ## Features
-## Enable standard library support.
-std = ["frost-core/std"]
 ## Enable `serde` support for types that need to be communicated. You
 ## can use `serde` to serialize structs with any encoder that supports
 ## `serde` (e.g. JSON with `serde_json`).
diff --git a/frost-p256/src/lib.rs b/frost-p256/src/lib.rs
index 35c2620..b21cb8d 100644
--- a/frost-p256/src/lib.rs
+++ b/frost-p256/src/lib.rs
@@ -1,4 +1,4 @@
-#![cfg_attr(not(feature = "std"), no_std)]
+#![no_std]
 #![allow(non_snake_case)]
 #![deny(missing_docs)]
 #![cfg_attr(docsrs, feature(doc_auto_cfg))]
diff --git a/frost-rerandomized/Cargo.toml b/frost-rerandomized/Cargo.toml
index cc3a1d3..a1b0548 100644
--- a/frost-rerandomized/Cargo.toml
+++ b/frost-rerandomized/Cargo.toml
@@ -1,6 +1,7 @@
 [package]
 name = "frost-rerandomized"
 edition.workspace = true
+rust-version.workspace = true
 version.workspace = true
 authors.workspace = true
 readme = "README.md"
@@ -24,11 +25,8 @@ rand_core.workspace = true
 [dev-dependencies]
 
 [features]
-nightly = []
 default = ["serialization", "cheater-detection"]
 #! ## Features
-## Enable standard library support.
-std = ["frost-core/std"]
 ## Enable `serde` support for types that need to be communicated. You
 ## can use `serde` to serialize structs with any encoder that supports
 ## `serde` (e.g. JSON with `serde_json`).
diff --git a/frost-rerandomized/src/lib.rs b/frost-rerandomized/src/lib.rs
index a309d6f..78ee354 100644
--- a/frost-rerandomized/src/lib.rs
+++ b/frost-rerandomized/src/lib.rs
@@ -9,7 +9,7 @@
 //! - Each participant should call [`sign`] and send the resulting
 //!   [`frost::round2::SignatureShare`] back to the Coordinator;
 //! - The Coordinator should then call [`aggregate`].
-#![cfg_attr(not(feature = "std"), no_std)]
+#![no_std]
 #![allow(non_snake_case)]
 
 extern crate alloc;
diff --git a/frost-ristretto255/Cargo.toml b/frost-ristretto255/Cargo.toml
index 06e8803..355d5b4 100644
--- a/frost-ristretto255/Cargo.toml
+++ b/frost-ristretto255/Cargo.toml
@@ -1,6 +1,7 @@
 [package]
 name = "frost-ristretto255"
 edition.workspace = true
+rust-version.workspace = true
 version.workspace = true
 authors.workspace = true
 readme = "README.md"
@@ -24,8 +25,8 @@ sha2 = { version = "0.10.2", default-features = false }
 
 [dev-dependencies]
 criterion = { workspace = true, features = ["html_reports"] }
-frost-core = { workspace = true, features = ["std", "test-impl"] }
-frost-rerandomized = { workspace = true, features = ["std", "test-impl"] }
+frost-core = { workspace = true, features = ["test-impl"] }
+frost-rerandomized = { workspace = true, features = ["test-impl"] }
 insta.workspace = true
 hex.workspace = true
 lazy_static.workspace = true
@@ -36,11 +37,8 @@ rand_chacha.workspace = true
 serde_json.workspace = true
 
 [features]
-nightly = []
-default = ["serialization", "cheater-detection", "std"]
+default = ["serialization", "cheater-detection"]
 #! ## Features
-## Enable standard library support.
-std = ["frost-core/std"]
 ## Enable `serde` support for types that need to be communicated. You
 ## can use `serde` to serialize structs with any encoder that supports
 ## `serde` (e.g. JSON with `serde_json`).
diff --git a/frost-ristretto255/src/lib.rs b/frost-ristretto255/src/lib.rs
index 0929c22..cd376b6 100644
--- a/frost-ristretto255/src/lib.rs
+++ b/frost-ristretto255/src/lib.rs
@@ -1,4 +1,4 @@
-#![cfg_attr(not(feature = "std"), no_std)]
+#![no_std]
 #![allow(non_snake_case)]
 #![deny(missing_docs)]
 #![doc = include_str!("../README.md")]
diff --git a/frost-secp256k1-evm/Cargo.toml b/frost-secp256k1-evm/Cargo.toml
index 69f1f2b..eb1da44 100644
--- a/frost-secp256k1-evm/Cargo.toml
+++ b/frost-secp256k1-evm/Cargo.toml
@@ -1,6 +1,7 @@
 [package]
 name = "frost-secp256k1-evm"
 edition.workspace = true
+rust-version.workspace = true
 version.workspace = true
 authors.workspace = true
 readme = "README.md"
@@ -24,8 +25,8 @@ sha3 = { version = "0.10.6", default-features = false }
 
 [dev-dependencies]
 criterion.workspace = true
-frost-core = { workspace = true, features = ["std", "test-impl"] }
-frost-rerandomized = { workspace = true, features = ["std", "test-impl"] }
+frost-core = { workspace = true, features = ["test-impl"] }
+frost-rerandomized = { workspace = true, features = ["test-impl"] }
 insta.workspace = true
 hex.workspace = true
 lazy_static.workspace = true
@@ -35,11 +36,8 @@ rand_chacha.workspace = true
 serde_json.workspace = true
 
 [features]
-nightly = []
-default = ["serialization", "cheater-detection", "std"]
+default = ["serialization", "cheater-detection"]
 #! ## Features
-## Enable standard library support.
-std = ["frost-core/std"]
 ## Enable `serde` support for types that need to be communicated. You
 ## can use `serde` to serialize structs with any encoder that supports
 ## `serde` (e.g. JSON with `serde_json`).
diff --git a/frost-secp256k1-evm/src/lib.rs b/frost-secp256k1-evm/src/lib.rs
index a96ffaa..581c6f7 100644
--- a/frost-secp256k1-evm/src/lib.rs
+++ b/frost-secp256k1-evm/src/lib.rs
@@ -1,4 +1,4 @@
-#![cfg_attr(not(feature = "std"), no_std)]
+#![no_std]
 #![allow(non_snake_case)]
 #![deny(missing_docs)]
 #![cfg_attr(docsrs, feature(doc_auto_cfg))]
diff --git a/frost-secp256k1-tr/Cargo.toml b/frost-secp256k1-tr/Cargo.toml
index 1f9d16e..c4e6699 100644
--- a/frost-secp256k1-tr/Cargo.toml
+++ b/frost-secp256k1-tr/Cargo.toml
@@ -1,6 +1,7 @@
 [package]
 name = "frost-secp256k1-tr"
 edition.workspace = true
+rust-version.workspace = true
 version.workspace = true
 authors.workspace = true
 readme = "README.md"
@@ -24,8 +25,8 @@ sha2 = { version = "0.10.2", default-features = false }
 
 [dev-dependencies]
 criterion.workspace = true
-frost-core = { workspace = true, features = ["std", "test-impl"] }
-frost-rerandomized = { workspace = true, features = ["std", "test-impl"] }
+frost-core = { workspace = true, features = ["test-impl"] }
+frost-rerandomized = { workspace = true, features = ["test-impl"] }
 insta.workspace = true
 hex.workspace = true
 lazy_static.workspace = true
@@ -36,11 +37,8 @@ secp256k1 = "0.30.0"
 serde_json.workspace = true
 
 [features]
-nightly = []
-default = ["serialization", "cheater-detection", "std"]
+default = ["serialization", "cheater-detection"]
 #! ## Features
-## Enable standard library support.
-std = ["frost-core/std"]
 ## Enable `serde` support for types that need to be communicated. You
 ## can use `serde` to serialize structs with any encoder that supports
 ## `serde` (e.g. JSON with `serde_json`).
diff --git a/frost-secp256k1-tr/src/lib.rs b/frost-secp256k1-tr/src/lib.rs
index eee93fd..cc012d0 100644
--- a/frost-secp256k1-tr/src/lib.rs
+++ b/frost-secp256k1-tr/src/lib.rs
@@ -1,4 +1,4 @@
-#![cfg_attr(not(feature = "std"), no_std)]
+#![no_std]
 #![allow(non_snake_case)]
 #![deny(missing_docs)]
 #![cfg_attr(docsrs, feature(doc_auto_cfg))]
diff --git a/frost-secp256k1/Cargo.toml b/frost-secp256k1/Cargo.toml
index c6d6935..a027958 100644
--- a/frost-secp256k1/Cargo.toml
+++ b/frost-secp256k1/Cargo.toml
@@ -1,6 +1,7 @@
 [package]
 name = "frost-secp256k1"
 edition.workspace = true
+rust-version.workspace = true
 version.workspace = true
 authors.workspace = true
 readme = "README.md"
@@ -24,8 +25,8 @@ sha2 = { version = "0.10.2", default-features = false }
 
 [dev-dependencies]
 criterion.workspace = true
-frost-core = { workspace = true, features = ["std", "test-impl"] }
-frost-rerandomized = { workspace = true, features = ["std", "test-impl"] }
+frost-core = { workspace = true, features = ["test-impl"] }
+frost-rerandomized = { workspace = true, features = ["test-impl"] }
 insta.workspace = true
 hex.workspace = true
 lazy_static.workspace = true
@@ -35,11 +36,8 @@ rand_chacha.workspace = true
 serde_json.workspace = true
 
 [features]
-nightly = []
-default = ["serialization", "cheater-detection", "std"]
+default = ["serialization", "cheater-detection"]
 #! ## Features
-## Enable standard library support.
-std = ["frost-core/std"]
 ## Enable `serde` support for types that need to be communicated. You
 ## can use `serde` to serialize structs with any encoder that supports
 ## `serde` (e.g. JSON with `serde_json`).
diff --git a/frost-secp256k1/src/lib.rs b/frost-secp256k1/src/lib.rs
index eec2c8e..9485a23 100644
--- a/frost-secp256k1/src/lib.rs
+++ b/frost-secp256k1/src/lib.rs
@@ -1,4 +1,4 @@
-#![cfg_attr(not(feature = "std"), no_std)]
+#![no_std]
 #![allow(non_snake_case)]
 #![deny(missing_docs)]
 #![cfg_attr(docsrs, feature(doc_auto_cfg))]
-- 
2.34.1

